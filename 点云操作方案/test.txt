#include "opencv2/opencv.hpp"  
#include <windows.h>  
#include <Kinect.h> // Kinect Header files  
#include <fstream>
using namespace cv;
using namespace std;
// Safe release for interfaces  
template<class Interface>
inline void SafeRelease(Interface *& pInterfaceToRelease)
{
 
if (pInterfaceToRelease != NULL)
{
 
pInterfaceToRelease->Release();
pInterfaceToRelease = NULL;
 
}
 
}
 
//定义Kinect方法类  
class Kinect
{
 
public:
static const int        cDepthWidth = 512;
static const int         cDepthHeight = 424;
Kinect();
 
~Kinect();
 
HRESULT                 InitKinect();//初始化Kinect  
void                    Update();//更新数据  
void                    ProcessDepth(CameraSpacePoint* m_pCameraCoordinates, int nWidth, int nHeight);//处理得到的数据  
private:
 
IKinectSensor*          m_pKinectSensor;// Current Kinect  
IDepthFrameReader*      m_pDepthFrameReader;// Color reader  
CameraSpacePoint*       m_pCameraCoordinates;
ICoordinateMapper*      m_pCoordinateMapper;
 
};
 
//主函数  
int main()
{
 
 
//CameraSpacePoint*       CaPointCloud;
static const int        cDepthWidth = 512;
static const int        cDepthHeight = 424;
Kinect kinect;
kinect.InitKinect();
while (1)
{
 
kinect.Update();
if (waitKey(1) >= 0)//按下任意键退出  
{
 
break;
 
}
 
}
 
/*ifstream myFile;
myFile.open("dat.txt");
char output[100];
int i = 0;
if (myFile.is_open()) {
 
while (!myFile.eof()) {
 
for (int i = 0; i < 512*424; i++)
for (int j = 0; j < 512*424; j++)
{
 
myFile >> xyzdata[i][j][0];
myFile >> xyzdata[i][j][1];
myFile >> xyzdata[i][j][2];
 
 
}
 
 
}
 
}*/
 
 
 
 
 
/*glutInit(&argc, argv);
glutInitDisplayMode(GLUT_DEPTH );
glutInitWindowPosition(20, 20);
glutInitWindowSize(glWinWidth * 2, glWinHeight*1.5);
glutCreateWindow("DepthImage");
glutDisplayFunc(&renderscene);*/
//ProcessDepth(CaPointCloud, cDepthWidth, cDepthHeight);
 
 
 
return 0;
 
}
Kinect::Kinect()
{
 
m_pKinectSensor = NULL;
m_pDepthFrameReader = NULL;
m_pCoordinateMapper = NULL;
 
m_pCameraCoordinates = new CameraSpacePoint[cDepthWidth * cDepthHeight];// create heap storage for color pixel data in RGBX format  
 
}
 
Kinect::~Kinect()
{
 
if (m_pCameraCoordinates)
{
 
delete[] m_pCameraCoordinates;
m_pCameraCoordinates = NULL;
 
}
 
SafeRelease(m_pDepthFrameReader);// done with color frame reader  
 
if (m_pKinectSensor)
{
 
m_pKinectSensor->Close();// close the Kinect Sensor  
 
}
SafeRelease(m_pKinectSensor);
 
}
HRESULT Kinect::InitKinect()
{
 
HRESULT hr;
 
hr = GetDefaultKinectSensor(&m_pKinectSensor);
if (FAILED(hr))
{
 
return hr;
 
}
 
if (m_pKinectSensor)
{
 
// Initialize the Kinect and get the depth reader  
IDepthFrameSource* pDepthFrameSource = NULL;
 
hr = m_pKinectSensor->Open();
if (SUCCEEDED(hr)){
 
hr = m_pKinectSensor->get_CoordinateMapper(&m_pCoordinateMapper);
 
}
 
 
if (SUCCEEDED(hr))
{
 
hr = m_pKinectSensor->get_DepthFrameSource(&pDepthFrameSource);
 
}
 
if (SUCCEEDED(hr))
{
 
hr = pDepthFrameSource->OpenReader(&m_pDepthFrameReader);
 
}
 
SafeRelease(pDepthFrameSource);
 
}
 
if (!m_pKinectSensor || FAILED(hr))
{
 
printf("No ready Kinect found! \n");
return E_FAIL;
 
}
 
return hr;
 
}
 
void Kinect::Update()
{
 
if (!m_pDepthFrameReader)
{
 
return;
 
}
 
IDepthFrame* pDepthFrame = NULL;
 
HRESULT hr = m_pDepthFrameReader->AcquireLatestFrame(&pDepthFrame);
 
if (SUCCEEDED(hr))
{
 
 
 
IFrameDescription* pFrameDescription = NULL;
int nWidth = 0;
int nHeight = 0;
USHORT nDepthMinReliableDistance = 0;
USHORT nDepthMaxDistance = 0;
UINT nBufferSize = 0;
UINT16 *pBuffer = NULL;
 
if (SUCCEEDED(hr))
{
 
hr = pDepthFrame->get_FrameDescription(&pFrameDescription);
 
}
 
if (SUCCEEDED(hr))
{
 
hr = pFrameDescription->get_Width(&nWidth);
 
}
 
if (SUCCEEDED(hr))
{
 
hr = pFrameDescription->get_Height(&nHeight);
 
}
 
if (SUCCEEDED(hr))
{
 
hr = pDepthFrame->get_DepthMinReliableDistance(&nDepthMinReliableDistance);
 
}
 
if (SUCCEEDED(hr))
{
 
// In order to see the full range of depth (including the less reliable far field depth)  
// we are setting nDepthMaxDistance to the extreme potential depth threshold  
//nDepthMaxDistance = USHRT_MAX;
 
// Note:  If you wish to filter by reliable depth distance, uncomment the following line.  
hr = pDepthFrame->get_DepthMaxReliableDistance(&nDepthMaxDistance);
 
}
 
if (SUCCEEDED(hr))
{
 
hr = pDepthFrame->AccessUnderlyingBuffer(&nBufferSize, &pBuffer);
 
}
 
if (SUCCEEDED(hr))
{
 
//ProcessDepth(pBuffer, nWidth, nHeight, nDepthMinReliableDistance, nDepthMaxDistance);
hr = m_pCoordinateMapper->MapDepthFrameToCameraSpace(nWidth * nHeight, pBuffer, cDepthWidth * cDepthHeight, m_pCameraCoordinates);
//cout << " m_pCameraCoordinates has been date" << endl;
ProcessDepth(m_pCameraCoordinates, nWidth, nHeight);
 
 
 
}
 
SafeRelease(pFrameDescription);
 
}
 
SafeRelease(pDepthFrame);
 
}
void Kinect::ProcessDepth(CameraSpacePoint*m_pCameraCoordinates, int nWidth, int nHeight)
{
 
// Make sure we've received valid data  
/*if (m_pDepthRGBX && pBuffer && (nWidth == cDepthWidth) && (nHeight == cDepthHeight))
{
 
RGBQUAD* pRGBX = m_pDepthRGBX;
 
// end pixel is start + width*height - 1
const UINT16* pBufferEnd = pBuffer + (nWidth * nHeight);
 
while (pBuffer < pBufferEnd)
{
 
USHORT depth = *pBuffer;
 
// To convert to a byte, we're discarding the most-significant
// rather than least-significant bits.
// We're preserving detail, although the intensity will "wrap."
// Values outside the reliable depth range are mapped to 0 (black).
 
// Note: Using conditionals in this loop could degrade performance.
// Consider using a lookup table instead when writing production code.
BYTE intensity = static_cast<BYTE>((depth >= nMinDepth) && (depth <= nMaxDepth) ? (depth % 256) : 0);
 
pRGBX->rgbRed = intensity;
pRGBX->rgbGreen = intensity;
pRGBX->rgbBlue = intensity;
 
++pRGBX;
++pBuffer;
 
}*/
 
// Draw the data with OpenCV  
//Mat DepthImage(nHeight, nWidth, CV_8UC4,CaPointCloud);
//Mat show = DepthImage.clone();
//imshow("DepthImage", show);
FILE *file;
errno_t err;
 
if ((err = fopen_s(&file, "G:\\dat.txt", "a+")) != 0)
 
{
 
printf("can not open the file");
return;
 
 
 
}
 
for (int dIndex = 0; dIndex < (nWidth * nHeight); ++dIndex)
{
 
CameraSpacePoint p = m_pCameraCoordinates[dIndex];
 
fprintf(file, "(%f,%f,%f)", p.X, p.Y, p.Z);
fprintf(file, "\n");
 
 
 
 
 
}
fclose(file);
 
 
 
}